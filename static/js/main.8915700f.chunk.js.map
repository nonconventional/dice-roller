{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","diceRolls","numDice","numSides","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","handleClick","preventDefault","_this$state","i","diceRoll","Math","floor","random","push","this","total","react_default","a","createElement","className","onChange","htmlFor","id","min","max","type","onClick","length","Fragment","map","index","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8915700f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    diceRolls: [],\r\n    numDice: 1,\r\n    numSides: 0,\r\n  };\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleClick = event => {\r\n    event.preventDefault();\r\n\r\n    const { numDice, numSides } = this.state;\r\n    let diceRolls = [];\r\n\r\n    for (let i = 0; i < numDice; i++) {\r\n      const diceRoll = Math.floor(Math.random() * numSides) + 1;\r\n      diceRolls.push(diceRoll);\r\n    }\r\n\r\n    this.setState({ diceRolls });\r\n  };\r\n\r\n  render() {\r\n    const numDice = this.state.numDice;\r\n    const numSides = this.state.numSides;\r\n    const diceRolls = this.state.diceRolls;\r\n\r\n    let total = 0;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <select name=\"numSides\" onChange={this.handleChange} value={numSides}>\r\n          <option value={0}>Select a Dice</option>\r\n          <option value={4}>D4</option>\r\n          <option value={6}>D6</option>\r\n          <option value={8}>D8</option>\r\n          <option value={10}>D10</option>\r\n          <option value={12}>D12</option>\r\n          <option value={20}>D20</option>\r\n          <option value={100}>D100</option>\r\n        </select>\r\n        <br />\r\n        <label htmlFor=\"numDice\">\r\n          {'Please Enter number of Dice you would like to roll:'}\r\n        </label>\r\n        <input\r\n          id=\"numDice\"\r\n          name=\"numDice\"\r\n          min=\"1\"\r\n          max=\"10000\"\r\n          onChange={this.handleChange}\r\n          type=\"number\"\r\n          value={numDice}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>{'Roll the Dice! ðŸ˜Š'}</button>\r\n        <br />\r\n        {diceRolls.length > 0 && (\r\n          <React.Fragment>\r\n            <span>{'Here bee yar rollss!!!'}</span>\r\n            <br />\r\n            {diceRolls.map((diceRoll, index) => {\r\n              total += diceRoll;\r\n              return (\r\n                <React.Fragment>\r\n                  <span>{'Dice Roll #' + (index + 1) + ': ' + diceRoll}</span>\r\n                  <br />\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n            <br />\r\n            <span>\r\n              <strong>{'Total: ' + total}</strong>\r\n            </span>\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}